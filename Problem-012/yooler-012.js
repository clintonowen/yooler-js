'use strict';

/**
 * ========== PROBLEM 12: Highly divisible triangular number ==========
 * The sequence of triangle numbers is generated by adding the natural
 * numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 *        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *         1: 1
 *         3: 1,3
 *         6: 1,2,3,6
 *        10: 1,2,5,10
 *        15: 1,3,5,15
 *        21: 1,3,7,21
 *        28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */

/**
 * ========== MY THOUGHTS ==========
 */

function InputException (message) {
  this.message = message;
  this.name = 'InputException';
}

function findTriangle (n) {
  // Validate the input
  if (!n || n < 1 || !Number.isInteger(n)) {
    throw new InputException('Please enter a positive integer for `n`.');
  }

  let triangle;

  return `The first triangle number to have over ${n} divisors is ${triangle}.`;
}

/* ========== INVALID INPUTS ========== */
// console.log(findTriangle());
// console.log(findTriangle(-5));
// console.log(findTriangle(5.33));
// console.log(findTriangle('15'));

/* ========== VALID INPUTS ========== */
// console.log(findTriangle(1));
// console.log(findTriangle(10));
// console.log(findTriangle(100));

/* ========== TEST CASE ========== */
console.log(findTriangle(5)); // => 28

/* ========== SOLUTION ========== */
// console.log(findTriangle(500)); // => ?

module.exports = findTriangle;
