'use strict';

/**
 * ========== PROBLEM 12: Highly divisible triangular number ==========
 * The sequence of triangle numbers is generated by adding the natural
 * numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 *        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *         1: 1
 *         3: 1,3
 *         6: 1,2,3,6
 *        10: 1,2,5,10
 *        15: 1,3,5,15
 *        21: 1,3,7,21
 *        28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */

/**
 * ========== MY THOUGHTS ==========
 * The most basic solution I can think of is to iterate through the triangular
 * numbers, checking the number of divisors until the desired number is found.
 *
 * To iterate through the triangular numbers, we'll start by declaring a
 * `triangleNum` variable equal to 0. Then we can use a simple loop with `i=1`,
 * adding `i` to `triangleNum`, checking the number of divisors, and then
 * incrementing `i` by 1. The loop should end when the number of divisors
 * reaches the target number.
 *
 * To check divisors for a number, `n`, iterate from `i=1` to `i=sqrt(n)`,
 * checking if `n` is evenly divisible by `i`. If so, add `i` to a `divisors`
 * array. If `i !== sqrt(n)`, also add its opposite (`n / i`).
 */

function InputException (message) {
  this.message = message;
  this.name = 'InputException';
}

function getDivisors (n) {
  const divisors = [];
  for (let i = 1; i <= Math.sqrt(n); i++) {
    if (n % i === 0) {
      divisors.push(i);
      if (i !== Math.sqrt(n)) {
        divisors.push(n / i);
      }
    }
  }
  return divisors.sort();
}

function findTriangle (n) {
  // Validate the input
  if (!n || n < 1 || !Number.isInteger(n)) {
    throw new InputException('Please enter a positive integer for `n`.');
  }

  let divisors = [];
  let triangleNum = 0;

  for (let i = 1; divisors.length < n; i++) {
    triangleNum += i;
    divisors = getDivisors(triangleNum);
  }

  return `The first triangle number to have over ${n} divisors is ${triangleNum}.`;
}

/* ========== INVALID INPUTS ========== */
// console.log(findTriangle());
// console.log(findTriangle(-5));
// console.log(findTriangle(5.33));
// console.log(findTriangle('5'));

/* ========== VALID INPUTS ========== */
// console.log(findTriangle(1));
// console.log(findTriangle(10));
// console.log(findTriangle(100));

/* ========== TEST CASE ========== */
// console.log(findTriangle(5)); // => 28

/* ========== SOLUTION ========== */
console.time();
console.log(findTriangle(500)); // => 76576500
console.timeEnd();

module.exports = findTriangle;
